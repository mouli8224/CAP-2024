class pair{
    int row;
    int col;
    public pair(int row,int col){
        this.row = row;
        this.col = col;
    }
}
class Solution {
    int cnt = 0;
    public void bfs(char[][] grid,int[][] vis,int i ,int j){
        cnt=cnt+1;
        Queue<pair> q = new LinkedList<>();
        pair p1 = new pair(i,j);
        q.offer(p1);
        while(!q.isEmpty()){
            pair p3 = q.poll();
            int a = p3.row;
            int b = p3.col;
            if(a-1>=0 && grid[a-1][b]=='1' && vis[a-1][b]!=1){
                vis[a-1][b]=1;
                pair p2 = new pair(a-1,b);
                q.offer(p2);
            }
            if(a+1<grid.length && grid[a+1][b]=='1' && vis[a+1][b]!=1){
                vis[a+1][b]=1;
                pair p2 = new pair(a+1,b);
                q.offer(p2);
            }
            if(b+1<grid[0].length && grid[a][b+1]=='1' && vis[a][b+1]!=1){
                vis[a][b+1]=1;
                pair p2 = new pair(a,b+1);
                q.offer(p2);
            }
            if(b-1>=0 && grid[a][b-1]=='1' && vis[a][b-1]!=1){
                vis[a][b-1]=1;
                pair p2 = new pair(a,b-1);
                q.offer(p2);
            }
        }
    }
    public int numIslands(char[][] grid) {
        int[][] vis = new int[grid.length][grid[0].length];
        for(int i =0;i<grid.length;i++){
            for(int j =0;j<grid[i].length;j++){
                if(grid[i][j]=='1' && vis[i][j]==0){
                    bfs(grid,vis,i,j);
                }
            }
        }
        return cnt;
    }
}
