class Solution {
    public void BFS(int[][] graph,int[] vis,int i,int color){
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(i);
        if(color%2==0){
            vis[i] = 2;
        } else {
            vis[i] = 4;
        }
        while(!queue.isEmpty()){
            color++;
            int num1 = queue.poll();
            int color2 = 0;
            int num2 = vis[num1];
            if(num2 == 4) color2 = 2;
            else color2 = 4;
            int[] arr1 = graph[num1];
            for(int j : arr1){
                if(vis[j]==0){
                    vis[j]=color2;
                    queue.offer(j);
                }
            }
        }
    }
    public boolean isBipartite(int[][] graph) {
        int[] vis = new int[graph.length];
        int color = 0;
        boolean bool1 = true;
        for(int i =0;i<graph.length;i++){
            if(vis[i]==0){
                BFS(graph,vis,i,color++);
            }
        }
        for(int i =0;i<vis.length;i++){
            System.out.println(vis[i]);
        }
        for(int i =0;i<graph.length;i++){
            int[] arr1 = graph[i];
            int num1 = vis[i];
            for(int j =0;j<arr1.length;j++){
                int num3 = arr1[j];
                int num2 = vis[num3];
                if(num1==num2){
                    return false;
                }
            }
        }
        return true;
    }
}
